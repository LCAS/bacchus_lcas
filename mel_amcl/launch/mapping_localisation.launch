<?xml version="1.0" encoding="ISO-8859-15"?>
<launch>

  <arg name="site_name" default="riseholme"/>
  <arg name="datum_file" default="$(find mel_amcl)/config/datums/$(arg site_name).yaml"/>
  <arg name="use_sim" default="false"/>

  <arg name="three_d" default="false" />

  <arg name="gps_error_mask_std" default="0.1" />

  <rosparam command="load" file="$(arg datum_file)" />

  <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform_node" clear_params="true" respawn="true">
    <!-- Input remapping -->
    <!-- /thorvald_001/imu_raw (IMU)-->
    <!-- /thorvald_001/fix (GPS coords)-->
    <!-- /thorvald_001/fix_velocity (Direction heading from GPS coords)-->
    <!-- thorvald_001/odometry/base_raw (Odom)-->
    <!-- Just GNNS localisation
      Will need to convert fix velocity from Vector3Stamped to be usable for IMU data and Odom data
      if we want to do just GNSS. Since robot_localization by default uses IMU and odom. 
      
      Find below:
      http://docs.ros.org/en/api/geometry_msgs/html/msg/Vector3Stamped.html
      http://docs.ros.org/en/melodic/api/sensor_msgs/html/msg/Imu.html
      http://docs.ros.org/en/api/nav_msgs/html/msg/Odometry.html

      Actually could we just mask out the odom like we do with GNSS futher on?
    -->
    <remap from="imu/data" to="thorvald_001/imu_raw" unless="$(arg three_d)"/>
    <remap from="imu/data" to="thorvald_001/imu_raw" if="$(arg three_d)"/>
    <remap from="odometry/filtered" to="thorvald_001/odometry/base_raw"/>
    <remap from="gps/fix" to="thorvald_001/fix"/>
    <remap from="thorvald_001/odometry/base_raw" to="odometry/gps/unfiltered"/>
  </node>

    <!-- GPS mask for high error data (we tend to be better off just ignoring it)
        so far only applies to 2d data -->
  <node pkg="mel_amcl" type="gps_odom_mask.py" name="gps_odom_mask" clear_params="true" unless="$(arg three_d)">
      <!-- Input remapping -->
      <remap from="thorvald_001/odometry/base_raw" to="odometry/gps/unfiltered"/>
      <param name="gps_error_mask_std" value="$(arg gps_error_mask_std)"/>
      <!-- Output remapping -->
      <remap from="odometry/gps/mask" to="odometry/gps/mask"/>
      <remap from="yaw/mask" to="yaw/mask"/>
  </node>
 
  <!-- load parameters for eKF -->
  <rosparam command="load" file="$(find mel_amcl)/config/mapping_localisation.yaml" />

  <!-- eKF for the odom frame using gps - we only use odom frame for mapping - but use GPS data. 
  Gmapping makes map frame - But should equal odom!!!. -->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_mapping_odom_2d" clear_params="true" respawn="true" unless="$(arg three_d)">
    <!-- Input remapping -->
    <remap from="odometry/gps" to="odometry/gps/mask"/>
    <remap from="yaw" to="yaw/mask"/>
    <!-- Output remapping -->
    <remap from="odometry/filtered" to="thorvald_001/odometry/base_raw"/>
  </node>

  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_mapping_odom_2d" clear_params="true" respawn="true" if="$(arg three_d)">
    <!-- Input remapping -->
    <remap from="thorvald_001/odometry/base_raw" to="odometry/gps/unfiltered"/>
    <remap from="yaw" to="yaw"/>
    <remap from="attitude" to="thorvald_001/imu_raw" if="$(arg use_sim)"/>
    <!-- Output remapping -->
    <remap from="odometry/filtered" to="thorvald_001/odometry/base_raw"/>
  </node>


</launch>
