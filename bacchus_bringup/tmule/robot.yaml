---
session: robot
init_cmd: |
  #exec /bin/bash
  cd @TMULE_CONFIG_DIR@ || true
  set -o pipefail
  function export_default () {
    var_name="$1"
    var_default="$2"
    eval $var_name="${!var_name:-$var_default}"
    export $var_name
    echo "  $0 -> $var_name=${!var_name}"
  }

  # source ROS
  source "/opt/ros/$(rosversion -d)/setup.bash"

  # load robot-specific config file
  if [ -r "$HOME/.rasberryrc" ]; then echo "*** loading $HOME/.rasberryrc" ; source "$HOME/.rasberryrc"; fi

  # load home-gui-specific config file
  if [ -r "$HOME/.treatmentrc" ]; then echo "*** loading $HOME/.treatmentrc" ; source "$HOME/.treatmentrc"; fi

  export_default BASE_CONFIG_DIR `readlink -f . || echo .`
  export_default ROBOT_NAME `hostname | tr "-" "_" | tr "." "_"`
  export_default SCENARIO_NAME "default"
  # load robot-specific config file
  if [ -r "$BASE_CONFIG_DIR/robots/$ROBOT_NAME.sh" ]; then echo "*** loading $BASE_CONFIG_DIR/robots/$ROBOT_NAME.sh" ; source "$BASE_CONFIG_DIR/robots/$ROBOT_NAME.sh"; fi
  # load scenario-specific config file
  if [ -r "$BASE_CONFIG_DIR/scenarios/$SCENARIO_NAME.sh" ]; then echo "*** loading $BASE_CONFIG_DIR/scenarios/$SCENARIO_NAME.sh" ; source "$BASE_CONFIG_DIR/scenarios/$SCENARIO_NAME.sh"; fi  # configure the development workspace (assuming we are in rasberry_bringup/tmule)
  export_default CATKIN_WORKSPACE "`readlink -f ../../../.. || echo $HOME/rasberry_ws`"
  source "$CATKIN_WORKSPACE/devel/setup.bash"

  export_default VPN_BASE_ADDR "172.24.0.0"

  # search for VPN tun device:
  default_iface=`route -n | grep "^$VPN_BASE_ADDR" | tr -s " " |  cut -f8 -d" " || echo lo`
  default_ip=`ip addr show dev "$default_iface" | grep "inet " | sed 's@ *inet \([0-9\.]*\).*@\1@' || echo 127.0.0.1`


  # set ROS_MASTER to the correct IP
  export_default ROS_MASTER $default_ip
  # set ROS_IP not to the IP that we will connect to remotely
  export_default ROS_IP `ip route get $ROS_MASTER | grep "src" | sed 's/.*src \([0-9\.]*\).*/\1/' || echo $ROS_MASTER`
  # set ROS_HOSTNAME to the ROS_IP to avoid configuring /etc/hosts for anyone who connects
  export_default ROS_HOSTNAME "$ROS_IP"


  # figure out the robot number from the hostname, assuming it is like `thorvald-XXX`
  export_default ROBOT_NO `hostname | cut -f2 -d"-"`

  export_default ROBOT_CONFIG_PATH "$(rospack find bacchus_bringup)/config/robots/robot_$ROBOT_NO"

  export ROS_MASTER_URI="http://$ROS_MASTER:11311/"
  export_default ROSBRIDGE_IP "10.8.0.18"
  export_default ROSBRIDGE_PORT "9090"


  export_default TELEOP_CONTROLLER "xbox"  # Set to "xbox", "xbox_one" or "tiger_g2"

  # joystick/gamepad device
  export_default JOY_DEV "/dev/input/js0"

  # Lidars
  export_default LIDAR_TYPE_FRONT umt30lxew
  export_default LIDAR_TYPE_BACK umt30lxew
  export_default USE_FRONT_LASER true
  export_default USE_BACK_LASER true

  export_default SIMULATE_LIGHTS true
  export_default LIGHTS_RELAY "/base_driver/setRl1"
  export_default AC_RELAY "/base_driver/setRl2"
  export_default BUTTON_IND_LIGHTS 1
  if $TELEOP_CONTROLLER=="tiger_g2";
    then export_default BUTTON_IND_AC 3;
    else export_default BUTTON_IND_AC 6;
  fi


  # robot footprint
  export_default ROBOT_FOOTPRINT "$(rospack find bacchus_bringup)/config/robots/robot_$ROBOT_NO/robot_${ROBOT_NO}_footprint.yaml"

  # SIMULATION ENVIRONMENT VARIABLES
  export_default USE_SIM false
  export_default USE_GUI false

  # ROBOT DEPENDANT ENVIRONMENT VARIABLES

  # path where to expect MONGODB
  export_default MONGO_PATH "$HOME/mongodb"

  # robot can interfaces
  export_default CAN_INTERFACE_TYPE "enc_pcb_v1rev6"
  export_default CAN_INTERFACE_NAME "/dev/ttyUSB0"


  # Hardware specific variables
  export_default USE_ENCLOSURE_BOARD false


  # use RTK_GNSS?
  export_default GNSS_TYPE ""
  export_default USE_RTK true
  export_default RTK_IP "192.168.0.50"
  export_default RTK_PORT "21098"

  # use IMU?
  export_default USE_IMU false
  export_default UM7_IMU_PORT /dev/ttyUSB1
  export_default USE_XSENS false

  # use MEL? For localisation quality topic and/or gps-lidar fusion
  # set USE_MEL=true and FUSE_GPS=false to run amcl and publish quality
  export_default USE_MEL true
  export_default FUSE_GPS true
  export_default EKF_PUBLISH_TF false
  export_default USE_GPS_ONLY true
  export_default USE_GNSS_FENCE true
  export_default THREE_D_LOCALISATION false
  export_default GNSS_INS_ACTIVATED false

  export_default USE_ROW_CHANGE_ACTION true
  export_default USE_CARROT false
  export_default USE_OMNI false
  export_default POLE_POSITIONS ""
  export_default RECONFIGURE_EDGES false
  export_default EDGE_RECONFIGURE_CONFIG ""
  export_default USE_TEB_PLANNER false
  export_default RECONF_EDGES false

  # Start position for sim
  export_default ROBOT_POS_X_1 0.0
  export_default ROBOT_POS_Y_1 0.0
  export_default ROBOT_POS_A_1 0.0

  #Home GUI
  export_default USE_HOME_GUI false

  # Monitoring
  export_default SENTOR_CONFIG "$(rospack find bacchus_bringup)/config/site_files/default/open/sentor.yaml"
  export_default STARTUP_SENTOR true
  export_default STARTUP_SLACKEROS false

  # Site config
  export_default DATUM_FILE ""
  export_default TMAP_FILE "$(rospack find bacchus_bringup)/config/site_files/${FARM_NAME}/${FIELD_NAME}/tmap.tmap"
  export_default POLE_POSITIONS ""
  export_default FARM_NAME ""
  export_default FIELD_NAME ""  
  # Site config defaults
  export_default METRIC_MAP "$(rospack find bacchus_bringup)/config/site_files/default/open/map.yaml"
  export_default NOGO_MAP "$(rospack find bacchus_bringup)/config/site_files/default/open/map.yaml"
  export_default GAZEBO_WORLD_PATH "$(rospack find bacchus_bringup)/config/site_files/default/open/empty_grass.world"
  export_default ROW_TRAVERSAL_CONFIG "$(rospack find bacchus_bringup)/config/site_files/default/open/row_traversal_cfg.yaml"
  export_default ROW_CHANGE_CONFIG "$(rospack find bacchus_bringup)/config/site_files/default/open/row_change_cfg.yaml"


# tags: core, nav
windows:
- name: roscore
  tags: [base]
  panes:
  - roslaunch rasberry_bringup roscore.launch use_sim:=$USE_SIM
  check: "rostopic list"
- name: init
  tags: [base]
  panes:
  - mkdir -p "$MONGO_PATH" && roslaunch mongodb_store mongodb_store.launch db_path:=$MONGO_PATH
  - if [ -r "$BASE_CONFIG_DIR/robots/$ROBOT_NAME.yaml" ]; then rosparam load "$BASE_CONFIG_DIR/robots/$ROBOT_NAME.yaml"; fi
  - if ! [ -r "$ROBOT_FOOTPRINT" ]; then roslaunch bacchus_bringup update_footprint_from_robot_config.launch robot_no:=$ROBOT_NO; fi
  check: "rosservice list | grep -q message_store"
- name: robot
  tags: [base]
  panes:
  - roslaunch rasberry_bringup robot_bringup.launch robot_model:=${ROBOT_CONFIG_PATH}/robot_$ROBOT_NO.yaml model_extras:=${ROBOT_CONFIG_PATH}/robot_${ROBOT_NO}_extras.xacro datum_file:="$DATUM_FILE" ekf_publish_tf:="$EKF_PUBLISH_TF" simple_sim:=$USE_SIM with_teleoperation:=true world:=$GAZEBO_WORLD_PATH with_gui:=$USE_GUI teleop_controller_type:=$TELEOP_CONTROLLER teleop_controller:=$(rospack find thorvald_teleop)/config/$TELEOP_CONTROLLER.yaml start_pose_x:=$ROBOT_POS_X_1 start_pose_y:=$ROBOT_POS_Y_1 start_pose_Y:=$ROBOT_POS_A_1 joy_dev:=$JOY_DEV can_interface_type:=$CAN_INTERFACE_TYPE can_interface_name:=$CAN_INTERFACE_NAME
  check: "rostopic list | grep -q -e base_state"
- name: sensors_bringup
  tags: [base]
  panes:
  - if ! $USE_SIM && $USE_FRONT_LASER; then roslaunch rasberry_bringup rasberry_lidar.launch lidar_type:="$LIDAR_TYPE_FRONT" position:="front" ip_address:="192.168.0.11"; fi
  - if ! $USE_SIM && $USE_BACK_LASER; then roslaunch rasberry_bringup rasberry_lidar.launch lidar_type:="$LIDAR_TYPE_BACK" position:="back"  ip_address:="192.168.0.10"; fi
  - if ! $USE_SIM && $USE_IMU; then roslaunch rasberry_bringup rasberry_imu.launch use_imu:="$USE_IMU" um7_imu_port:="$UM7_IMU_PORT" use_xsens:="$USE_XSENS"; fi
  - if ! $USE_SIM && $USE_RTK; then roslaunch rasberry_bringup rasberry_gnss.launch rtk_ip:="$RTK_IP" rtk_port:="$RTK_PORT" gnss_type:="$GNSS_TYPE" ins_activated:=$GNSS_INS_ACTIVATED; fi
  check: "rostopic list | egrep -q 'scan|fix'"
- name: localisation_prelims
  tags: [site]
  panes:
  - roslaunch rasberry_navigation map_server.launch map:="$METRIC_MAP" use_no_go_map:=true no_go_map:=$NOGO_MAP
  - if $USE_FRONT_LASER && $USE_BACK_LASER; then roslaunch rasberry_bringup corner_lasers_merger.launch; fi
  check: "rostopic list | grep -q /map"
- name: localisation
  tags: [site]
  panes:
  - if ! $USE_MEL; then roslaunch rasberry_navigation rasberry_localisation.launch publish_tf:="$EKF_PUBLISH_TF" use_omni:="$USE_OMNI" use_sim:="$USE_SIM"; fi
  - if $USE_MEL; then roslaunch mel_amcl rasberry_localisation.launch fuse_gps:="$FUSE_GPS" use_gps_only:="$USE_GPS_ONLY" ekf_publish_tf:="$EKF_PUBLISH_TF" datum_file:="$DATUM_FILE" three_d:=$THREE_D_LOCALISATION use_gnss_fence:="$USE_GNSS_FENCE" initial_pose_x:=$ROBOT_POS_X_1 initial_pose_y:=$ROBOT_POS_Y_1 initial_pose_a:=$ROBOT_POS_A_1 use_sim:=$USE_SIM; fi
  - rosrun robot_pose_publisher robot_pose_publisher
  check: "rosservice list | egrep -q 'ekf_map|amcl'"
- name: topo_map
  tags: [site]
  panes:
  - roslaunch rasberry_navigation topological_map_manager_central.launch tmap_file:=$TMAP_FILE
- name: topo_nav
  tags: [site]
  panes:
  - if ! $USE_TEB_PLANNER; then roslaunch rasberry_navigation topological_navigation_robot.launch move_base_reconf_service:=DWAPlannerROS move_base_planner:=move_base/DWAPlannerROS use_omni:="$USE_OMNI" site_name:="$SITE_NAME" reconfigure_edges:="$RECONF_EDGES"; else roslaunch rasberry_navigation topological_navigation_robot.launch move_base_reconf_service:=TebLocalPlannerROS move_base_planner:=move_base/TebLocalPlannerROS use_omni:="$USE_OMNI" site_name:="$SITE_NAME" reconfigure_edges:="$RECONF_EDGES"; fi
  check: "rosservice list | grep -q topological_navigation"
- name: nav_actions
  tags: [site]
  panes:
  - if $USE_FRONT_LASER && $USE_BACK_LASER; then roslaunch rasberry_move_base move_base_dwa.launch use_carrot_planner:=$USE_CARROT use_omni:="$USE_OMNI" robot_no:=$ROBOT_NO robot_footprint:=$(rospack find bacchus_bringup)/config/robots/robot_$ROBOT_NO/robot_${ROBOT_NO}_footprint.yaml; else roslaunch bacchus_bringup move_base_dwa.launch; fi
  - roslaunch bacchus_bringup row_traversal_basic.launch traversal_config:="$ROW_TRAVERSAL_CONFIG"
  - if $USE_ROW_CHANGE_ACTION; then roslaunch polytunnel_navigation_actions row_change.launch pole_positions:=$POLE_POSITIONS row_change_config:="$ROW_CHANGE_CONFIG"; fi
  check: "rosrun dynamic_reconfigure dynparam list | grep row_traversal"
- name: rviz
  tags: [site]
  panes:
  - if ! USE_HOME_GUI; then DISPLAY=:0 rviz -d $(rospack find rasberry_bringup)/resources/row_traversal_action.rviz; fi
- name: monitoring
  tags: [site]
  panes:
  - if $STARTUP_SENTOR; then roslaunch rasberry_uv sentor.launch config_file:=$SENTOR_CONFIG auto_safety_tagging:=true; fi
  - roslaunch rasberry_monitors system_monitors.launch
  - if [ "$SLACK_WEBHOOK" ] && $STARTUP_SLACKEROS; then roslaunch slackeros slackeros.launch webhook:="$SLACK_WEBHOOK" topics:="/sentor/event" loggers:="/rosout:error"; else cat; fi
- name: debug
  tags: [base]
  panes:
  - ls
  skip: true
